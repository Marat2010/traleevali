from flask import Flask, request
from datetime import datetime
import locale
import json
import pytz
import time
import os
import requests
import boto3
import botocore

file_users = './users.json'
file_messages = './messages.json'

local_launch = bool(os.environ['local_launch'])
# local_launch = False

if local_launch:
    AWS_STORAGE_BUCKET_NAME = os.environ['AWS_STORAGE_BUCKET_NAME_TRALEE']  # S3_BUCKET_NAME = 'tralee'
    AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID_TRALEE']
    AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY_TRALEE']
else:
    AWS_STORAGE_BUCKET_NAME = os.environ['AWS_STORAGE_BUCKET_NAME']  # S3_BUCKET_NAME = 'tralee'
    AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']
    AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']

region = 'us-east-2'
AWS_URL = 'https://tralee.s3.us-east-2.amazonaws.com/'
s3 = boto3.resource('s3')

fmt = '%a %d %b %Y %H:%M:%S %Z'  # —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –¥–∞—Ç—ã
tz = pytz.timezone('Europe/Moscow')  # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∑–æ–Ω—ã

locale.setlocale(locale.LC_ALL, 'ru_RU.utf8')  # –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏

token_trans_ya = os.environ['token_trans_ya']
url_trans = 'https://translate.yandex.net/api/v1.5/tr.json/translate'

server_start = datetime.now(tz).strftime(fmt)


def write_json(data, filename=file_messages, wa='w'):
    if not local_launch:
        print('---=== –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª "local launch" –Ω–∞ AWS S3: ', filename)
        data = open(filename, 'rb')
        s3.Bucket(AWS_STORAGE_BUCKET_NAME).put_object(Key=filename[2:], Body=data)
    else:
        print('---=== –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ: ', filename)
        with open(filename, wa) as f:
            json.dump(data, f, indent=2, ensure_ascii=False, sort_keys=True)


def read_json(filename=file_messages):
    # print('---=== –ß—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞: ', filename)
    if not local_launch:
        print('---=== –ß—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞: "local launch" –Ω–∞ AWS S3', filename)
        #  "./bitr24/last_bindings.json" –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ "bitr24/last_bindings.json" —Ç–∞–∫ –∫–∞–∫ –≤ AWS S3 –ø—É—Ç—å –∫ –∫–ª—é—á—É —Ñ–∞–π–ª–∞
        #  –±–µ–∑ —Ç–æ—á–µ–∫, –ø–æ—Ç–æ–º—É –ø—Ä–æ–ø—É—Å–∫ –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤ -> filename[2:]
        # s3.Bucket(AWS_STORAGE_BUCKET_NAME).download_file(filename[2:], filename)  # –ß—Ç–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        r = s3.Object(AWS_STORAGE_BUCKET_NAME, filename[2:]).get()['Body'].read()  # –ß—Ç–µ–Ω–∏–µ —Å—Ä–∞–∑—É –≤ —Å–ª–æ–≤–∞—Ä—å
        r = json.loads(r, encoding='utf-8')
    else:
        with open(filename, 'r') as f:
            r = json.load(f)
            print('---=== –ß—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ "local launch –ª–æ–∫–∞–ª—å–Ω–æ" , –ó–Ω–∞—á–µ–Ω–∏–µ r= ', r)
    return r


def transl_msg(msg, language_code):
    data = {'key': token_trans_ya, 'lang': language_code, 'text': msg}  # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    try:
        r = requests.post(url_trans, data=data).json()
        answer_tr = r['text'][0] if r['code'] == 200 else '---*** Could not translate ***---'
    except Exception:
        answer_tr = '---*** Could not translate ***---'
    return answer_tr


try:    # –ß—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
    messages = read_json()
    users = read_json(file_users)
except Exception as e:
    print('–§–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∏–ª–∏ –ø–æ–ø–æ—Ä—á–µ–Ω—ã! {}'.format(e))
    messages = []
    users = {}

app = Flask(__name__)  # —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask


@app.route('/')
def index():
    return 'Hello World! –≠—Ç–æ –Ω–∞—à –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä\n –ï–≥–æ <a href="/status">—Å—Ç–∞—Ç—É—Å</a>'


@app.route('/status/')
def status():
    current_time = datetime.now(tz).strftime(fmt)  # —Ç–µ–∫. –≤—Ä–µ–º—è
    count_messages = len(messages)
    count_users = len(users)
    data = {'Status': 'Ok',
            'name': '–¢—Ä–∞–ª–∏ –í–∞–ª–∏ ',
            '–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞': server_start,
            '–¢–µ–∫. –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞': current_time,
            '–ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ': count_messages,
            '–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ': count_users}

    # –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ json, –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤ "ensure_ascii=False"
    state = json.dumps(data, indent=2, ensure_ascii=False, sort_keys=True)
    return state


@app.route('/send_message/')
def send_message():
    username = request.json['username']
    password = request.json['password']
    text = request.json['text']

    if username in users:
        if users[username]['password'] != password:
            text = '--** –î–ª—è —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!!! –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ. **--'
            # return {'ok': False}
    else:
        users[username] = {'password': password, 'lang_code': ''}
        write_json(users, file_users)

    # –ß–∞—Ç-–ë–æ—Ç —Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–º.
    # –ß—Ç–æ–±—ã –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–ª—Å–∏—å –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ –Ω–∞–±–µ—Ä–∏—Ç–µ "/L **" , –≥–¥–µ –≤–º–µ—Å—Ç–æ ** –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å
    # –∫–æ–¥ —è–∑—ã–∫–∞: ru, en, de, fr, zh, ja, ar, ... .
    # –ö–æ–¥—ã —è–∑—ã–∫–æ–≤ –∑–¥–µ—Å—å:
    # https://yandex.ru/dev/translate/doc/dg/concepts/api-overview-docpage/#api-overview__languages
    # –ü–æ—Å–ª–µ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ:
    #          22:56:16 03/06/2020 marat
    #          –ö–∞–∫ —Ç—ã?
    #          üó∫ en : How are you?
    #  –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ "/L" –±–µ–∑ –∫–æ–¥–∞.

    if text == '/help':
        text = '  –ß–∞—Ç-–ë–æ—Ç —Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–º.\n' \
               '–ß—Ç–æ–±—ã –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–∏c—å –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ –Ω–∞–±–µ—Ä–∏—Ç–µ "/L **" , ' \
               '–≥–¥–µ –≤–º–µ—Å—Ç–æ ** –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥ —è–∑—ã–∫–∞: ru, en, de, fr, zh, ja, ar, ... .\n   –ö–æ–¥—ã —è–∑—ã–∫–æ–≤ –∑–¥–µ—Å—å:\n' \
               '"https://yandex.ru/dev/translate/doc/dg/concepts/api-overview-docpage/#api-overview__languages" .\n' \
               '  –ü–æ—Å–ª–µ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.\n' \
               '–ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ "/L" –±–µ–∑ –∫–æ–¥–∞\n'

    if '/L' in text and len(text.split()) < 3:
        ll = text.split()
        users[username]['lang_code'] = ll[1] if len(ll) > 1 else ''
        write_json(users, file_users)
    elif '/USERS' in text:
        text += '\n {}'.format(users)
    elif users[username]['lang_code']:
        lang_code = users[username]['lang_code']
        tr_msg = transl_msg(text, lang_code)
        text += '\n\U0001F5FA {} : {}\n'.format(lang_code, tr_msg)

    messages.append({'username': username, 'text': text, 'timestamp': time.time()})

    if len(messages) > 100:
        mes_100 = messages[-100:]  # –û—Å—Ç–∞–≤–ª—è–µ–º 100 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        messages.clear()
        messages.extend(mes_100)

    write_json(messages)

    return {'ok': True}


@app.route('/get_messages/')
def get_messages():
    after = float(request.args['after'])
    print('--AFTER: ', after)
    result = []
    print('---- –°–æ–æ–±—â–µ–Ω–∏—è :', messages, type(messages))
    for message in messages:
        print('–°–æ–æ–±—â–µ–Ω–∏–µ :', message, type(message))
        if message['timestamp'] > after:
            result.append(message)

    return {'messages': result}


if __name__ == '__main__':
    app.run()  # –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è


# locale.setlocale(locale.LC_ALL, 'RU')  # –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è (–¥–ª—è –¥–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
# locale.setlocale(locale.LC_ALL, ('RU', 'UTF8'))

